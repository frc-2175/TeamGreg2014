// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2175.Robot2014.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2175.Robot2014.Robot;
import edu.wpi.first.wpilibj.smartdashboard.*;

/**
 * This class uses a PID loop to turn the robot so it is facing a given direction.
 */
public class  DriveToAngle extends Command {
    
    double inputAngle;

    public DriveToAngle(float angle) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        inputAngle = angle;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        System.out.println("Driving to angle...\n");
	
	Robot.drivetrain.ResetGyro();
	Robot.drivetrain.gyroPID.reset();
	Robot.drivetrain.gyroPID.setSetpoint(inputAngle);
	
        // reset P, I, D coeffs from Dashboard for debug / tuning
//	Robot.drivetrain.gyroPID.setPID(SmartDashboard.getNumber("P"),SmartDashboard.getNumber("I")/1000,0);
	
	Robot.drivetrain.gyroPID.enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        double PIDval = Robot.drivetrain.gyroPID.get();
        SmartDashboard.putNumber("Gyro Heading", Robot.drivetrain.GetGyroAngle());
	SmartDashboard.putNumber("PID Output", PIDval);
	Robot.drivetrain.ArcadeDriveWithParameters(0,PIDval);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return Robot.drivetrain.gyroPID.onTarget();
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.drivetrain.gyroPID.disable();
        Robot.drivetrain.ArcadeDriveWithParameters(0, 0);
	System.out.println("Done driving to angle.\n\n");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
