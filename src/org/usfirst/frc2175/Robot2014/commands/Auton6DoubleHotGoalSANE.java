    // RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2175.Robot2014.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2175.Robot2014.Robot;
import edu.wpi.first.wpilibj.smartdashboard.*;

/**
 * This auton routine gets two hot goals in autonomous. We've never tested it
 * though; I'm not even sure we can schedule and run commands this way.
 */
public class  Auton6DoubleHotGoalSANE extends Command {
    
    int step;
    boolean isDone;
    Command activeCommand;
    
    public Auton6DoubleHotGoalSANE() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        step = 1;
	isDone = false;
	activeCommand = new MoveArmOut();
	activeCommand.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        switch (step) {
	case 1:	activeCommand = new Delay(0.5); // Wait for the vision system
                    activeCommand.start();
                    step = 2;
                    break;
	case 2:	if (!activeCommand.isRunning()) step = 3; // Are we done delaying?
                    break;
	case 3:	if (SmartDashboard.getBoolean("IS_RECT")) { // Is there a hot goal?
                    // We are in front of the hot goal
                    activeCommand = new Auton6PartialStartHot();
                    activeCommand.start();
                } else {
                    // We chose the wrong goal :(
                    activeCommand = new Auton6PartialStartCold();
                    activeCommand.start();
                }
                step = 4;
	case 4:	if (!activeCommand.isRunning()) step = -1;
                    break;
	case -1:isDone = true;
                    break;
	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isDone;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
