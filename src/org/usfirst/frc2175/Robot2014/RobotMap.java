// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2175.Robot2014;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainLeft;
    public static SpeedController drivetrainRight;
    public static RobotDrive drivetrainRobotDrive;
    public static Encoder drivetrainLeftEncoder;
    public static Encoder drivetrainRightEncoder;
    //public static SpeedController drivetrainMagicPIDOutput;
    public static Gyro drivetrainGyro;
    public static DoubleSolenoid drivetrainShifters;
    public static DoubleSolenoid armArmSolenoid;
    public static SpeedController armRollerBar;
    public static DigitalInput armArmOutSwitch1;
    public static DigitalInput armArmOutSwitch2;
    public static DigitalInput launcherLatchSwitch;
    public static DigitalInput launcherWinchUpSwitch;
    public static SpeedController launcherWinchMotor;
    public static Encoder launcherWinchEncoder;
    public static Solenoid launcherLatch;
    public static DoubleSolenoid launcherTension;
    public static Solenoid launcherCatcher;
    public static Compressor compresserSubsystemCompressor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        drivetrainLeft = new Talon(1, 1);
	LiveWindow.addActuator("Drivetrain", "Left", (Talon) drivetrainLeft);
        
        drivetrainRight = new Talon(1, 2);
	LiveWindow.addActuator("Drivetrain", "Right", (Talon) drivetrainRight);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainLeft, drivetrainRight);
	
        drivetrainRobotDrive.setSafetyEnabled(true);
        drivetrainRobotDrive.setExpiration(10.0);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);
        

        drivetrainLeftEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Left Encoder", drivetrainLeftEncoder);
        drivetrainLeftEncoder.setDistancePerPulse(5.887E-4);
        drivetrainLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainLeftEncoder.start();
        drivetrainRightEncoder = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Right Encoder", drivetrainRightEncoder);
        drivetrainRightEncoder.setDistancePerPulse(5.887E-4);
        drivetrainRightEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainRightEncoder.start();
        //drivetrainMagicPIDOutput = new Talon(1, 10);
	//LiveWindow.addActuator("Drivetrain", "Magic PID Output", (Talon) drivetrainMagicPIDOutput);
        
        drivetrainGyro = new Gyro(1, 2);
	LiveWindow.addSensor("Drivetrain", "Gyro", drivetrainGyro);
        drivetrainGyro.setSensitivity(0.007);
        drivetrainShifters = new DoubleSolenoid(1, 1, 2);      
	
        
        armArmSolenoid = new DoubleSolenoid(1, 3, 4);      
	
        
        armRollerBar = new Talon(1, 4);
	LiveWindow.addActuator("Arm", "Roller Bar", (Talon) armRollerBar);
        
        armArmOutSwitch1 = new DigitalInput(1, 10); // FOR GREG: 11
	LiveWindow.addSensor("Arm", "Arm Out Switch 1", armArmOutSwitch1);
        
        armArmOutSwitch2 = new DigitalInput(1, 9); // FOR GREG: 6
        
	LiveWindow.addSensor("Arm", "Arm Out Switch 2", armArmOutSwitch2);
        
        launcherLatchSwitch = new DigitalInput(1, 5);
	LiveWindow.addSensor("Launcher", "Latch Switch", launcherLatchSwitch);
        
        launcherWinchUpSwitch = new DigitalInput(1, 8);
	LiveWindow.addSensor("Launcher", "Winch Up Switch", launcherWinchUpSwitch);
        
        launcherWinchMotor = new Talon(1, 3);
	LiveWindow.addActuator("Launcher", "Winch Motor", (Talon) launcherWinchMotor);
        
/*        launcherWinchEncoder = new Encoder(1, 11, 1, 12, false, EncodingType.k4X);
	LiveWindow.addSensor("Launcher", "Winch Encoder", launcherWinchEncoder);
        launcherWinchEncoder.setDistancePerPulse(1.0);
        launcherWinchEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        launcherWinchEncoder.start(); */
        
        launcherLatch = new Solenoid(1, 5);
	LiveWindow.addActuator("Launcher", "Latch", launcherLatch);
        
        launcherTension = new DoubleSolenoid(1, 6, 7);      
	
        
        launcherCatcher = new Solenoid(1, 8);
	LiveWindow.addActuator("Launcher", "Catcher", launcherCatcher);
        
        compresserSubsystemCompressor = new Compressor(1, 7, 1, 3);
    }
}
