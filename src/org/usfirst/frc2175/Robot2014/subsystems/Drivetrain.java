// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2175.Robot2014.subsystems;

import org.usfirst.frc2175.Robot2014.RobotMap;
import org.usfirst.frc2175.Robot2014.Robot;
import org.usfirst.frc2175.Robot2014.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc2175.Robot2014.PIDOut;
//import static org.usfirst.frc2175.Robot2014.RobotMap.drivetrainGyro;
//import static org.usfirst.frc2175.Robot2014.RobotMap.drivetrainLeftEncoder;


/**
 * This class makes the robot drive!
 */
public class Drivetrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController left = RobotMap.drivetrainLeft;
    SpeedController right = RobotMap.drivetrainRight;
    RobotDrive robotDrive = RobotMap.drivetrainRobotDrive;
    Encoder leftEncoder = RobotMap.drivetrainLeftEncoder;
    Encoder rightEncoder = RobotMap.drivetrainRightEncoder;
    //SpeedController magicPIDOutput = RobotMap.drivetrainMagicPIDOutput;
    Gyro gyro = RobotMap.drivetrainGyro;
    DoubleSolenoid shifters = RobotMap.drivetrainShifters;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //public PIDController encoderPID = RobotMap.drivetrainEncoderPID;
    //public PIDController gyroPID = RobotMap.drivetrainGyroPID;
    //PIDOutput encoderPIDOut;
    public PIDController encoderPID;
    //PIDOutput gyroPIDOut;
    public PIDController gyroPID;
    
    public Drivetrain() {
        //encoderPIDOut = new PIDOut();
        encoderPID = new PIDController(1.0, 0.1, 0.0,/* F: 0.0, */ leftEncoder, new PIDOut(), 0.02);
        // The output of this controller is irrelevant, since we will get the value manually and use it ourselves.
        LiveWindow.addActuator("Drivetrain", "Encoder PID", encoderPID);
        encoderPID.setContinuous(false);
        encoderPID.setAbsoluteTolerance(0.2); 
        encoderPID.setOutputRange(-0.8, 0.8);

        //gyroPIDOut = new PIDOut();
        gyroPID = new PIDController(0.015, 0.001, 0.0,/* F: 0.0, */ gyro, new PIDOut(), 0.02);
        // The output of this controller is irrelevant, since we will get the value manually and use it ourselves.
        LiveWindow.addActuator("Drivetrain", "Gyro PID", gyroPID);
        gyroPID.setContinuous(false);
        gyroPID.setAbsoluteTolerance(0.2); 
        gyroPID.setOutputRange(-0.8, 0.8);
    }
    

    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ArcadeDriveWithJoysticks());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        
        shifters.set(DoubleSolenoid.Value.kReverse);
    }
    
    /**
     * Takes given inputs and drives the robot with them.
     * @param forward The forward/backward speed, from -1 to 1. (Left joystick)
     * @param turning The right/left turning speed, from -1 to 1. (Right joystick)
     */
    public void ArcadeDriveWithParameters(double forward, double turning) {
        ArcadeDriveWithParameters(forward, turning, false);
    }
    
    /**
     * Takes given inputs and drives the robot with them. Optionally gives the 
     * ability to drive in a straight line, using the gyro.
     * @param forward The forward/backward speed, from -1 to 1. (Left joystick)
     * @param turning The right/left turning speed, from -1 to 1. (Right joystick)
     * @param autoSteer Whether to autosteer or not. If enabled, "turning" will
     * be ignored and the robot will attempt to drive in a perfectly straight line.
     */
    public void ArcadeDriveWithParameters(double forward, double turning, boolean autoSteer) {
	double steerAmount = turning;
        if (autoSteer) {
            steerAmount = -(Robot.drivetrain.GetGyroAngle() / 40) * SmartDashboard.getNumber("Straight Driving Tuning");
            double range = SmartDashboard.getNumber("Straight Driving Range");
            if (steerAmount > range) steerAmount = range;
            if (steerAmount < -range) steerAmount = -range;
        }
        SmartDashboard.putNumber("Turning Amount", steerAmount);
        robotDrive.arcadeDrive(forward, steerAmount, false);
//	fakeCompressor.set(1);
	
    }
    
    /**
     * Shifts the robot to a given gear.
     * @param isHigh Whether to shift to high gear.
     */
    public void ShiftToGear(boolean isHigh) {
        if (isHigh) {
                shifters.set(DoubleSolenoid.Value.kForward);
        } else {
                shifters.set(DoubleSolenoid.Value.kReverse);
        }
    }
    
    /**
     * Returns true if the robot is currently in high gear.
     * @return True, if the robot is in high gear. Otherwise, false.
     */
    public boolean GetShiftState() {
        return shifters.get() == DoubleSolenoid.Value.kForward;
    }
    
    /**
     * Resets both drive encoders so they start counting from 0.
     */
    public void ResetEncoders() {
        leftEncoder.reset();
        rightEncoder.reset();
    }
    
    /**
     * Returns the distance in feet that the robot has traveled, averaged from
     * both encoders on the drivetrain.
     * @return The distance traveled, in feet.
     */
    public double GetAverageEncoderDistance() {
        return (leftEncoder.getDistance() + rightEncoder.getDistance()) / 2;
    }
    
    /**
     * Gets the speed in ft/sec, averaged from both encoders on the drivetrain.
     * @return The robot's speed in ft/sec.
     */
    public double GetAverageEncoderRate() {
        return (leftEncoder.getRate() + rightEncoder.getRate()) / 2;
    }
    
    /**
     * Resets the gyro to start counting from 0.
     */
    public void ResetGyro() {
        gyro.reset();
    }
    
    /**
     * Gets the gyro angle, in degrees.
     * @return The gyro angle, in degrees.
     */
    public double GetGyroAngle() {
        return gyro.getAngle();
    }

}

